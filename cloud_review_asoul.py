# -*- coding:utf-8 -*-
import sys
import time
import argparse
import traceback

import re
import tiebaBrowser

import atexit


@atexit.register
def exit_hanle():
    review.close()


class CloudReview(tiebaBrowser.CloudReview):

    __slots__ = ['white_kw_exp']

    def __init__(self, BDUSS_key, tieba_name, sleep_time):
        super().__init__(BDUSS_key, tieba_name, sleep_time)

        white_kw_list = ['vup|ÁÆ°‰∫∫|(Âì™‰∏™|‰ªÄ‰πà)v',
                         '(a|b|Áùø|ÁöáÂçè|Êâπ|p)Á´ô|bÂçö|Êµ∑È≤ú|(v|a)(Âêß|8)|nga|404|ytb|ËÆ∫Âùõ|Â≠óÂπïÁªÑ|Á≤â‰∏ùÁæ§|Áõ¥Êí≠Èó¥',
                         '4v|Ê®±Ëä±Â¶π|‰∏≠‰πã‰∫∫|ÂõΩv|‰∏™‰∫∫Âäø|holo|asoul|2434|vr|Êú®Âè£|Áå¥Ê•º|ÁöÆÂ•ó|Á∫∏Áâá‰∫∫|Â•óÁöÆ|‰∏ªÊí≠|Â∞èÁ∫¢|Âõ¢Èïø|ÂòâÁÑ∂|ÁÑ∂ÁÑ∂|ÂêëÊôö|ÊôöÊôö|‰πÉÁê≥|Â•∂Áê≥|Ë¥ùÊãâ|ÊãâÂßê|Áèà‰πê|p\+|pÂÆ∂|Â∏ïÈáå|Áà¨ÁäÅ|a(È™ö|s)|ÂêëÊôö|Ê¢ì|(Êµ∑|Â≠©)Â≠êÂßê|‰∏ÉÊµ∑|Áà±‰∏Ω‰∏ù',
                         'ËÅîÂä®|Ê≠åÂõû|ÊùÇË∞à|Ê≠åÂäõ|‰ºÅÂàí|Ââç‰∏ñ|sc|ÂºπÂπï|‰∫åÊ¨°ÂÖÉ|ÂºÄÊí≠|ÂèñÂÖ≥|bv',
                         'Ë∞úËØ≠|ÊãâËÉØ|ËôöÊó†|ÊàêÂàÜ|ÈªëÂ±Å|ÈªëÊñô|Á†¥Èò≤|ÁúüÂèØÊÄú|ÂºÄÂõ¢|(Â•Ω|ÁÉÇ)Ê¥ª|Âπ≤Á¢é|ÂØπÁ∫ø|Êï¥Ê¥ª|‰πê‰∫Ü|‰πêÂ≠ê|Ê©ÑÊ¶Ñ|ÁΩ¢‰∫Ü|ÈíìÈ±º|Ê¢ÅÊú®|ËäÇÂ•è|ÂÜ≤Èîã|yygq|Èò¥Èó¥|Ê≥™ÁõÆ|Âõæ‰∏Ä‰πê|ÊôöÂÆâ',
                         'ÊáÇÂì•|Â≠ùÂ≠ê|mmr|Á≤â‰∏ù|Â§©Áãó|crew|ÊùèÂ•¥|ÂπªÂÆò|ÂÆ¶ÂÆò|ÂπªÂ£´|ÂòâÂøÉÁ≥ñ|È°∂Á¢ó‰∫∫|Ë¥ùÊûÅÊòü|Â•∂Ê∑áÊ∑ã|n70|Áöá(Áèà|ÂÆ∂)|Ê≥•Âì•|Â∞èÂÖîÂ≠ê|(a|b)u|‰∏Ä‰∏™È≠Ç',
                         'Á©∫Â≠ê|ÊúâÁ©∫ÊúâÁ©∫']
        self.white_kw_exp = re.compile('|'.join(white_kw_list), re.I)

    def close(self):
        super().close()

    def run(self):
        while True:
            try:
                _threads = self.get_threads(self.tieba_name)
                users = {}
                for thread in _threads:
                    if self._check_thread(thread):
                        tiebaBrowser.log.info(f"Try to delete thread {thread.text} post by {thread.user.logname}")
                        self.del_thread(self.tieba_name, thread.tid)
                        continue
                    user_threads = users.get(thread.user.portrait,[])
                    user_threads.append(thread)
                    users[thread.user.portrait] = user_threads
                for portrait,_threads in users.items():
                    if len(_threads) >= 4:
                        for thread in _threads:
                            if thread.like < 30 or thread.reply_num < 30:
                                self.del_thread(self.tieba_name,thread.tid)
                tiebaBrowser.log.debug('heartbeat')
                if self.sleep_time:
                    time.sleep(self.sleep_time)
            except Exception:
                tiebaBrowser.log.error(f"Unexcepted error:{traceback.format_exc()}")

    def _check_thread(self, thread: tiebaBrowser.Thread):
        """
        Ê£ÄÊü•threadÂÜÖÂÆπ
        """

        posts = self.get_posts(thread.tid)
        if len(posts) == 0:
            return False

        thread.user.level = posts[0].user.level
        flag = self._check_text(thread)
        if flag == -1:
            pass
        elif flag == 1:
            return True
        elif flag == 0:
            pass
        else:
            tiebaBrowser.log.error(f'Wrong flag {flag} in _check_thread!')
            pass

        if len(posts) > 1:
            second_floor = posts[1]
            if second_floor.reply_num > 0:
                for comment in self.get_comments(second_floor.tid, second_floor.pid):
                    if comment.user.level < 5 and re.search('Èù¢Âõ¢|ÂÆÖ.{0,5}Â∫¶Â®ò|ÂÖçË≤ª|[ùüô-ùü°]|‰ªì‰∫ïÁ©∫Âú®Á≠âÂ∞º', comment.text):
                        self.block(self.tieba_name, comment.user, 10)
                        self.del_post(self.tieba_name,
                                      comment.tid, comment.pid)

        if posts.total_pn > 1:
            posts = self.get_posts(thread.tid, 9999)

        for post in posts:
            flag = self._check_post(post)
            if flag == 0:
                pass
            elif flag == 1:
                if post.floor == 1:
                    return True
                else:
                    tiebaBrowser.log.info(f"Try to delete post {post.text} post by {post.user.logname}")
                    self.del_post(self.tieba_name, post.tid, post.pid)
            elif flag == 2:
                return True
            else:
                tiebaBrowser.log.error(f'Wrong flag {flag} in _check_thread!')

        return False

    def _check_post(self, post: tiebaBrowser.Post):
        """
        Ê£ÄÊü•ÂõûÂ§çÂÜÖÂÆπ
        """

        flag = self._check_text(post)
        if flag == -1:
            return 0
        elif flag == 1:
            return 1
        elif flag == 0:
            if post.is_thread_owner and post.user.level < 6 and self.exp.kill_thread_exp.search(post.text):
                return 2
            if post.imgs:
                if post.user.level < 3 and not self.white_kw_exp.search(post.text):
                    for img in post.imgs:
                        url = self.scan_QRcode(img)
                        if url and url.startswith('http'):
                            return 1
        else:
            tiebaBrowser.log.error(f'Wrong flag {flag} in _check_post!')

        self.mysql.add_pid(self.tieba_name, post.pid)
        return 0

    def _check_text(self, obj):

        if self.mysql.has_pid(self.tieba_name, obj.pid):
            return -1

        is_white = self.mysql.is_portrait_white(self.tieba_name, obj.user.portrait)
        if is_white == True:
            return -1
        elif is_white == False:
            self.block(self.tieba_name, obj.user, day=10,
                       reason=f"line:{sys._getframe().f_lineno}")
            return 1

        if type(obj) is tiebaBrowser.Post:
            for img in obj.imgs:
                if self.has_img_hash(img):
                    return 1

        text = obj.text
        if re.search("(a|(?<!t)v|Âòâ|Ôºã|\+|‚ûï|Ê¢ì|ÁΩê|Ë±Ü|È∏ü|È≤®)(√∑|/|Ôºè|‚ûó|Áïú|Â§Ñ|Èô§)|ÁöÆÂ•óÁãó", text, re.I) is not None:
            return 1

        level = obj.user.level
        if level > 4:
            return -1

        has_white_kw = True if self.white_kw_exp.search(text) else False
        if has_white_kw:
            return 0

        has_rare_contact = True if self.exp.contact_rare_exp.search(text) else False
        has_contact = True if (has_rare_contact or self.exp.contact_exp.search(text)) else False

        if level < 3:
            if self.exp.job_nocheck_exp.search(text):
                self.block(self.tieba_name, obj.user, day=10,
                           reason=f"line:{sys._getframe().f_lineno}")
                return 1
            if self.exp.app_nocheck_exp.search(text):
                self.block(self.tieba_name, obj.user, day=10,
                           reason=f"line:{sys._getframe().f_lineno}")
                return 1
            if self.exp.game_nocheck_exp.search(text):
                self.block(self.tieba_name, obj.user, day=10,
                           reason=f"line:{sys._getframe().f_lineno}")
                return 1

            if self.exp.maipian_exp.search(text):
                self.block(self.tieba_name, obj.user, day=10,
                           reason=f"line:{sys._getframe().f_lineno}")
                return 1
            if obj.user.gender == 2:
                if self.exp.female_check_exp.search(text):
                    if level == 1:
                        return 1
                    elif not has_white_kw:
                        return 1
                if obj.has_audio:
                    return 1

            if self.exp.business_exp.search(text):
                return 1

            has_job = True if self.exp.job_exp.search(text) else False
            if has_job and level == 1:
                return 1
            if self.exp.job_check_exp.search(text) and (has_job or has_contact):
                return 1
            if self.exp.app_exp.search(text) and (self.exp.app_check_exp.search(text) or has_contact):
                return 1
            if self.exp.course_exp.search(text) and self.exp.course_check_exp.search(text):
                return 1
            if self.exp.game_exp.search(text) and self.exp.game_check_exp.search(text):
                return 1
            if self.exp.hospital_exp.search(text):
                return 1

        if level == 1:
            if obj.user.user_name:
                if self.exp.name_nocheck_exp.search(obj.user.user_name):
                    self.block(self.tieba_name, obj.user, day=10,
                               reason=f"line:{sys._getframe().f_lineno}")
                    return 1
                if self.exp.name_exp.search(obj.user.user_name):
                    if self.exp.name_check_exp.search(obj.user.user_name) or has_contact:
                        return 1
            if obj.user.nick_name:
                if self.exp.name_nocheck_exp.search(obj.user.nick_name):
                    return 1
                if self.exp.name_exp.search(obj.user.nick_name):
                    if self.exp.name_check_exp.search(obj.user.nick_name) or has_contact:
                        return 1
            if self.exp.lv1_exp.search(text):
                return 1

        return 0


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Ë¥¥Âêß‰∫ëÂÆ°Êü•', allow_abbrev=False)
    parser.add_argument('--BDUSS_key', '-k',
                        type=str,
                        default='default',
                        help='Áî®‰∫éËé∑ÂèñBDUSS')

    parser.add_argument('--tieba_name', '-b',
                        type=str,
                        default='asoul',
                        help='Ë¥¥ÂêßÂêç')
    parser.add_argument('--sleep_time', '-st',
                        type=float,
                        default=0,
                        help='ÊØè‰∏§Ê¨°‰∫ëÂÆ°Êü•ÁöÑÈó¥ÈöîÊó∂Èó¥')

    review = CloudReview(**vars(parser.parse_args()))
    review.run()
